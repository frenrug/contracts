// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {Test} from "forge-std/Test.sol";
import {Frenrug} from "../src/Frenrug.sol";
import {MockKey} from "./mocks/MockKey.sol";
import {Coordinator} from "infernet/Coordinator.sol";
import {LibSign} from "infernet-tests/lib/LibSign.sol";
import {Configured} from "../src/pattern/Configured.sol";
import {MockNode} from "infernet-tests/mocks/MockNode.sol";
import {DataAttestation} from "./deployed/DataAttestation.sol";
import {FriendtechManager} from "../src/FriendtechManager.sol";
import {EIP712Coordinator} from "infernet/EIP712Coordinator.sol";
import {FriendtechSharesV1} from "./interfaces/FriendtechSharesV1.sol";

/// @title IFrenrugEvents
/// @notice Events emitted by Frenrug
contract IFrenrugEvents {
    event ConfigUpdated(Frenrug.Config newConfig);
    event MessageResponse(
        uint48 indexed id,
        address indexed key,
        Frenrug.MessageAction action,
        FriendtechManager.ExecutionFailure failure,
        string[] rationales,
        address[] nodes,
        bytes rawInput,
        uint256 hashedInput
    );
}

/// @title FrenrugParams
/// @notice Useful mock parameters
contract FrenrugParams {
    /*//////////////////////////////////////////////////////////////
                               CONSTANTS
    //////////////////////////////////////////////////////////////*/

    /// @notice Mock noop action poseidon hash
    uint256 internal constant HASH_NOOP =
        11_839_161_816_435_908_610_894_408_149_244_111_300_119_165_065_228_251_838_388_298_906_407_508_472_069;

    /// @notice Mock noop action proof
    bytes internal constant PROOF_NOOP =
        hex"1e8e1e1300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000b8016b0b9b8f03952ece18dbb887b5d7cdc6f8c45077be0c35e0494bb2975872d4e28638954e2d270db592e504b2fcbaba2ec050a2e62482325f6c2ba9c52a260db0647d15f2287cfdf0ae2b66d33c51748a332e01b6b9146d606d8d2e9257e4b031dc2dabace3eabebac4db3ec5530e12c240372cbad5b9fc5934d98b2b974e46b009040181c5809350786237291b3ce821b33095fc465a98e732abb5426e70dfb287fbbbb9dbf575a3ca9d491b8cc9006e213c4fe096810481f4a4f7a453ea1d71c03b3aa1fc9e394a10a9519331c2ee0610fe7ddee2ad9283adddcbe1b03e5fa2700e6f1c68d74546101c8f9ae00f6fb0c0352e1aceac8c6d10d74fce02ad4de0bf344b9f1223f49b7d4ca9d30bffefcc0ca700a1d243711e5cabf3d6920f6311ce9fe1e58894a3be4d0940bbae4af67f533d35d8cea758f5d143a6ba24c3b190996747678828dd35d9082b5085b60c183e472f219da31c6699f173628e8e32e2e795c73d04a5de8ad271aa2090fa5b34ff6ebf25e7d5cfc0f4a7f3dc7d58cd12c872e16ce26fc901d581a0870f14b051f4bd86f9f972f658008ae2a650518a214abe851e847b69e50acd12e1c807669b03eb98e0c817d10b36047bf1a2b760825352e5574e3f198a1ec3ff46fd47090a7a60bb001570fe19cb6c81a2f85f5a32ba4c7b1373a2f5998e3ce576c4bcb6d7bbe4287c681501abc2fcad3ebf27e971a2ecc1b2b8074e56dfd6c7e795e7cb589908e6e276ba7f4e0772626b9c0d93601cc3ef974bd0481fd4762a3a314e0d09b71d510d92b55915453316bda70ca680a8ecdf8f5710e229fd1b48324e8db5ee269b29a0d406ca8ac7b6cda7b7dfbdb0bc118e4c994c62b080548396c1d307264903571745d1ab0573a9273c84a705901027476125b8eb86cf2c454c2346178dabf4ab20ab36b46e80827c33f756540164e75d4f0a97f04fff8c4990d74fa61ee07074faf2a3ba935a90d2c69da4dad08cc6fe441300309085e7606533d6d6f3ceed38640fd5bea75f7c6e8fede0812129e3655133457a2d39f911a9676ed34ef016ebdbe00362be06ac8e3033c18000a1f0840e92529003c99247d8dd94b9f2a24230c520c0203da1f3982d2450e090e260d86d97710e383c48d625b3da2c737fc6de7b8880bb16b17643845fb80be14a872ebd0d82eb6123f2d71d2a3f7e84c8a4a1b74c667113c972ad8d3aef70d035ee2bc6f5d288287cb37359ae0aae54317e00f5061d5ba16af6f092f021c291c0b8db0bebcdcf71e74c332cac6074d04c7ea17291602e19fd67ac347678bf21847874c150f9cc65fc1039a7655f057c836ab6df6d12bb7852f8b4d88aaa6111b542f351c6173fd6c59b1d31fb27bf2f8f2d825edcbe8038c5cc211659f5f7415ac5045553616f5d4f9aadef8c5a0593b657a818d5a6996b76a060522d420e0016286fd52279ecf2d20eb1f339540d8938610dd6d7d9da16707b6543e2b454f01d51e7af2c8efd3c5fbe011dcc39aa25cff25b24d8e1347b15694f036ac93d11bab5cc1b8e2bbc619ed51d19fdfa894e881045b59e1dac231fc6f36bc3a050e24ae5f4da7bcc08dcc404c0b95610e7475b34505f6b421ea991199fee2725bae04133c79ab269854d78846e3470c4fa9f606ea7c54e729e0a734a6b290c812302f7149c359321fd44860a0eaa8b0f9a43d20eab1b309119e5afc07d52ff4791325b8f542a4b87867100cc0eb15a8e98b11f04a28fba51b341cf10337fc2f81a829c1ad03c49c6e9f6bba873ff05be83ea504148afc1720c844f9b257394d244814436a81d5890d857c536a4fb8001c407016c1718bbf06bf49f6240595d560551447959a7b42d68d755edfee1091cd041bc7040c64afab4a2e96ed995f90b4f620866794e7457417a81f0a4cd4bc4e39a4a2a649ef5cda27d07eb2107db4aeb50189c1e55f917141401cad015dc427c7d018cf1e44f377aef6a1606e4846ac4b262f0fc3e9857919197d9be2c8f5a004c3f3baec147b9f5d986bcc75f43b06a119d9acc386bd0d69cc461d5e3bdfb0e7a0d7952910bb255db6e471171c5f353619affac2b03a43e62a8b465eac28b38758343465cb89a1bcaf5d21619b03a31b14dbc3c85d6065f93f730f77d6329ff4d43dbc6340eb5d1ed558b1391f5141a20a167c2922c4cc5713910b5791790742148d104a1036b9c7914abc09d4f7587e0d0a572e7c4d8e135ff25d842669226685ce68d4df8db8614a5cf357a322c35123bbf937a5ebd1a0d8548e06154aa6a92f3f7b9d3fa5a80e3ae52315b876e6a217afc790516d1436751ded5746a023059a3a92b4fc0491ae70af48acbc1b4f99257ffadb009de443689bde3256945bf6cb954f83f6e69f9dc220a618a8e25744034ac14fa7e491c9101c853d78a3fe62175701e5100d5eee6a4d66890f6e78d918ef7e967b780826f40ee744136a099156a4542ceae9d3e6d3f70de17872c9e51b03f43c68d8a35b0564dab508e8771d4e5b9fb48618aa2dd5c80f6b98092c1e1d7cd53b8f713b52ede7dfed602da27e698324501c4239c7ef6d7423f3effd852193df1f80cc606db48102b9e36486553bfb7a4d3cb8d9372d0860dd0420b8ff1c1e23d9be7388ce79e0499b0b04f27b717f2ddbabb55e0620079e7b89ae7ee80f33b4d52890b36f6d27c693035b386e195ec034e4c08a124b4206ee57450901268e9e545f58a9165e988fd6fcf191a299262406d31c0f86bd893b4f2cfc96b626de350ab9211dc99882e2654c610b04f4fb2835d3c3d4c52180b1a3f9c723f62c68b3f99751d35c3ca0e4f53b807a1365d7453fadb988b5f89fedaeb1ac91601ea13888f58cab9b7659e8795abefb5626b8e4d1d06e779ece310ef2890722df0a9122eadaa42fbc6cac59c7ce97b978e9df5023b94d805c242cb5f3fa37ed531c64962ef870c50f48990328508e1e76db3bcd4e53269f01282dca7d97587abc22d1000cf6fa72fd4b4ceab4f3314fd24a68ee2a00025a13e7619c9dff0f31eb0dca9a1d722e0cf8f937637854005d148043b5327aa836306f465c8346db5a952b1ed32debd5d303ba13557700bbe175718f38867e89790ed3c3a89b0d6e270713928620f164cd22de654a7d0c8a6c61f496024ec3c696eeb9de36c83574a6d009f0335d42bc18756fe2375bf3bc3dd13642b7fa2158f908d37a691a14a1cdc808b4852629cb90f160b0c17d942c2625c89752f0812bcd00284e93ceb702a7480a6bdfd87264a65cbfeeaba72a71091323b46af40e2c80060688508bd99d88cd188b52e4964b956734e1e21c6b8b3630fd80e11b576e0f3fec8c272b7e02f91e2982b8ec85bd07136fd48f3869634b3c7d70900087b36a49573488fc0343880109c0ac83b77ad26ef8b679c9ae2b3f6965c4520226363571e8433909f13dcd962207a087b41b6b7739a8c6b6ef0666ee3a14edd51b6755ea93f57c95d51a93311a8769cd5c74f51aa9856c58ea8c643938d408030cec5c15e15d1be743106015176c28e2fd7971275057e23efeff0fbbb021d57a165e7d2526a50bd7b2b97c221865d008200cbf1ffef4df9454c78fd1cf58272869cc81f8be4d5e0c6a64a5db2049650077f19a730ec24053e3c785d706e1c9d27100d39d761d9b2547ddcb4f25b2e1c3d8318720009e9b44a04e77b6bafd6d871f7e200bfca3dc583afeb7dc065caadcd5158283dc0e0a7f26fc99f782e10ff32d18f9019fd4694e4f66491a26d40b955a25d94057e7fe6178d0eccbcb6ca42b02578a16699623aa06e4cf700cfaa63cfa5b14ec5d412ecdaf56cf0a9f5d3edfb7b47dbd4a6dde08e59868fa0be642bd8840febfb2ae52c3638ff32ffba44baba17b4da84fea0f17a0bb84cd24579dfc6b20c93a92a65b3b27ae6851f24f45656429c7f4b1d29ebf36e03622055d6153181c8a579582b16662042951bc76c5a388ca955c84b1149012a264462331f9c1e7d0ae31a8cfe1b50ce364e5f1327a2c7fcca00c7259d2dbfaa204a61350dd86f07ea593641a443d2bf21c5e71b3fbcbbafc9306dba5ab9a5ac44dfd1672a7d94941c3332b9ad46ca5098e0e7c19da9f8147c4862cb6bb824c9a454625c24477b6f333f01c18426028504445a8c497e8c34f7b7c82d4ac20e6dee59200000000000000000000000000000000000000000000000000000000000000021a2cba6648fad47fdd7a13a015b26f13858902475533d36946268f636ef17105000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    /// @notice Mock buy action posiedon hash
    uint256 internal constant HASH_BUY =
        17_639_449_752_237_132_562_357_721_156_698_828_966_712_960_511_397_511_862_471_908_578_071_080_397_629;

    /// @notice Mock buy action proof
    bytes internal constant PROOF_BUY =
        hex"1e8e1e1300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000b802b76c6d408a2a541941680a0faea440033bc327e3c5211afb89a9d061db685f501ce9cc7cb6d2a4bae4fa9f74b7b86fe634051b07853faf4fe30b2a1f201f640292b97f4b18fe70370a9ebeb7e5bcd531aef23518a11e5d536fe12d1135c22591ee3e989568b4ae5a953c486bcb87a42ac2eae481c3b31d0ced57c0795de265f00dfa63a19a734b7decdaab273c5446ac3fda648565b2e94283d42db8e6258e8266cb1ef798ce9a78607ae162e4fd720a11345024d996deb06fcfa98240a252807e3d5110babb62f8f5b362d142525f43e5f92b89ea24e82a3e53414f38405da26f6c21999dee5b49ac9c0d722e1ded06ca9d93e07dded1895eb989199362fc4212f41dfeb66f995cb2fd12853ae4e28d1341ef2f97063baa7ad1c881d3cf6480e55dfccbd206fd813d1cc4484bd56345e9c7900ef296ba4d6e96fc5a517ae862a2b387425e1f871daab83d58bdb512cd7e81016f7f9502a163bb1351a5e5d6a181f61ea385f6186b6b8641f1033b3b67151f286bf30b9696a45adbef2fbb74215320aeb913598c268160c55a00b032ea04d161d653c01e0138d16fa361a2f5d259411188512df21f5a291faf0600c36fe07c3dfd5e86af9f05d88784c6911f31838b1a9a3805372acab96e1561fb3fac6d3c450c8f725381c2467d70e98623717ef3735092228428cee2282885435f4e913db54a28a9089a20f469827b446350c38870644a0750db7e2fac56c20c9c4db5af0fde15c71ae72a5e455c815daae06ee56359c6aa95999684e584c3b31172a6d75f91e07c87c2e0409d6d64f1cc01380093a2432976abaf9d6e53a4d6f31cea52e7ec02f67225c55c613e3f6066413129294aee2c431cef80b6818455af4f8ce6deaa336f37f4f7e1da3244f23c40d412267fce3a3b3cad2c0e5fe93a54349cf1234f9bf87373b72313c206809fa051cba1f4c37ce16aabcd92b180c7ed71f9ea5a9eae83f5a28976d58db05c8a807f33d921c4032bd30e2a65d7589584bd4223c88c4548535f89e8180680b18ed29733d1a5ec3251f7d7a7167aa12bce647b23e5cfe5fb3035a3704aba916a0b71682c2602688b8f66b65ef04f0649e64c5b72950e786c8ed90a861859050d33f12b2143815ee63a6995c037dcfb483e03a3aecec411bb8ed0f483ba0d4a6701704f45af3d255a26204fbb00b9a81cfbfabccecb7f8a45bb87e7aaf15ee46936c0f1523e3bb99b1168c8517da071be39af0ea8856888df2eec61ce1a5d1a7ef3a2af1ae77b8884e06070000525c6a4c399287d7506e6877a60724e212480e36122b3b2e299099466d0bbdeed2b7831224dd960a5b7b40e8832df9e1cfd34215fd09d0edc34f813e185895b8b2d5492b115cbea30e4bdac1f5cc1c8b4a5fb8730f2e8f16697a3dba36aeada03fd7c932a182d2805d9911bdc77f6ac2f9390e97dd21059088aba6f93beb7eb575cdbdc3805f3c0070cf2ef259cade059185e0d7f91d9f56eb446a64ec22b8cc0a93ac26bcb43ece95c7a20fc668f72ed93be8ef6f06c3349a1c17bc7185e79539c59fc271ab4d11385b68f6beeb128611e39d7bac0c90720fcff4bf98b0604ea667ad6123dd4d436e8c158e3cf5da2f58e745aee0263e40e7485a730a70ccecc5bc076c1957a518665b7250c17745346f7be11a460cdd99c1d92c39ccbcf2a9df9431043b798fa821dea9724752c5763aa91815e61d08fca4d6a0e7fbf68cdae321987880b80e4a15e35dfb7e80f3f9fa5f3add2d0d887043812d259eb928474528d6f181b5ee667c509a1801e2e13440648dc5d6285d40c87b27b52396b29725be4383833dee5b75d865b9ef0390d7687f51a2bc2f900d0f3d8f1191e9b5287696cdd4dda0a5ce8cb134c02e8efe17a3e93e8675142e9e34ed369eb6ed9a552716c732cf686a05fe0426b44898a575cf43436f4d2baf5044809db4ef5e26c49d34175da3300d003fc4fff11b73ae2799ecd589e12f01198e889cc4cdef1c568e8029ed0d1436b6cca0b644c192a8e1c9da2ecbd2028d22fd06e61a111ded7c7c040237a8a91f84bb08f3aa7de339dcbd7077f61c18f36ff19fd67139bf82aa3764dac21bcf5b4df736bc72f717dfd939068d59db2fa89f4b6fbc7c3f93b419ae0c13bd906a8599e4124910b86c53aafb27ecd9b62ec6fb552aa0e9b3b9033c1e0836e5932806d6ba27a50860625e7219afe502db0770d2db2496dac3e8bee7bf163205992cae477bbc2c5e00b192c9b19505335407834ce154aaa050c8b9d8a05508a54ab6adf268a04c4b556611851981f073582febde5b1f810bf39f002af9eeb89e827b3deeb5c7eb91074554d56f3c0df0ec0b0490bccb3568d527629a09dd96157e5363acb14756d08564fdbf36afc40ae22910648a8ce567d258ad71290a4a252b86268c47fba98d248a28785c76cc73362ff0606a99468351176d8e426eeb63ad6c53ce4042d3c266958d07efdae52ab91a5f88e678b56ddb89eb9aacd84089fa5e553e6fe2dfa7e1b736a2571547e65629ecce45da4c4c17d43b5147137813396434d4249bb9e2d305f912cff43768be2c2d09e96fda10f733544a95c5408451480e77c4537adfb250a7631e2595f9ff10d93861aa46751c91870386fa2a0c5e55aa30b0c60f6572f5c45f009578c5c902d23b33b4447f3914b06d80003b51e210a81c907fc6f30a6a26cb866c86f7092413989f50bc58057ebc33ed920521ba6980fe54225eb11345c699f6e7a1c1eb128ca9523cd76c6971d0f665c74cb6ed78703b311de633872ec09f0db34dc8fb008b577b269c27f2175384c852e9314fe57ec6bc6254d24cd303b0e465aac19e075a359855d858a33eb0194adc35922fff8645831253dc1082a3b0ea7f9f2de00fb22b3f8714a9972e444ff0421b79355cef1d459be09bd39cc869bb2eb16787044db3a69598c0a532c90837b60e443226a552a2045fcadf058384c47929f53a29bdc69f4261da00cb5275fe2078dd68121fa1ce4356cac91e15c7e41928d11a1a2a93099a26d330ba33195be3262b1eea2887005928c34bb716ed0412568b7e21612490238a568dca8db02f9089fd9a234108b335ea3af5263e58fc26f73f281324ed6f823f63a1b2a03e324ac0e20be8bdcf9257ec4b4b697ce8367d348f640d1fafadc943fab2f97e48351da3a8c9b7bdbef6011fb6bf99a5e11fd89bd1b52a53cbe9d92ff7140c30386b7f35dbd7ac7c80b4f839515151207db77e71b55c1d3130ce3a288c84b9ef84af611702a94026365a055673dab7cf0c3098637c700574da043c003e69ab029d8b47f1bceac42d512e0f30195f2308587f70972e3319fd467def3207ba36156f009b09e8d135a2367ad7f1d7dc17cbb4b23afe828a1d3c0f566f359fb8a81871890645bb25fa3d5945c1ca3ce0c64b076c914ca1b02895dc058d461478b5be4f9e23a9a62b22e7780fcf04a85d1920114608ed6d910f7c94c17d3420336c8e504a8bd5182c7f11a4dccfa4f47201d985f7528da0f3207c34952849a58ef202ce644f4f9c9358d8b7865ae914d3b94797105625f72f0de31db275e862cd7f7b42792f69dda67cf5ccc82c93d7ed0b1e5b04dd2d400026722856292c421f82e7472cef3859a98e6a59846cf207c7d0b608bcdc755bcd0596bcd5d353a68fe3497e0d1256a9f8f8787e8b5c1c97c6392ba42c60b186681a7314efc229f33d98ef054fe66b124dadf6a2f86b70bbff14ef9d5ae46e3355184be41799f815ffb9c1be21a1ebb27bf533f595251762c0e92d1217c0aa4fe62419fcb42f646038aaf62bf73ebe4ae9555952cdcf630a1f4044c79456ebf0882f3261db9447e8ed43be3baef3b8a73ac0004cb4bed1fa9eb92dc78b2595d89e246a0c9aeabee70f4a2699aac8163cd8611cfa833b8a00a68c1a05259d8bca3c039953dccf9f8a50e2ec8f2af7553072c173eacf94aa113997b8c9a1701fe41c048dcba460376c0119ad0429396e5dc53353dea7f5dde9c429a114ca19b9656e2db7536afcacf5800c3d3cbcfdebb112457d1d2ec3bdabbd6b98b747a04d91ba296f36a9fb778ed64cde3343b81454793392cff6057a23ad0fa1ad63d991a32904c81236fdab1c7786b40e46f12dd1da7db7cd1f398742087dcb2ca456f9defe000000000000000000000000000000000000000000000000000000000000000226ff9323284b28ac6a2a8bd60a4d7426d526b18287a46066dbe1e41b9830eb3d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";

    /// @notice Mock sell action poseidon hash
    uint256 internal constant HASH_SELL =
        6_318_868_613_873_274_998_327_244_393_014_889_399_014_915_282_795_275_949_553_354_692_790_429_023_198;

    /// @notice Mock sell action proof
    bytes internal constant PROOF_SELL =
        hex"1e8e1e1300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000b802c4d1f6a78568e0b3d80ae2b330cb143a585d7c559433ba3f59b1e689c4b8caa005961c0855306ea841836c74dcf4d05c26faa279a87d334846a1e284e63130300c6f3003145cbbb1080a3a36d33e419f0dbc38c5ee5db2d325fbd95fe20c724301752abbaad67a8bb649298ab2ce47f0133da9ab82f0d99b8a2ac8c6867172227165b90ea199af5b395cddf747f649e4ff87c3053714b9a376790c7e21f77af171cb8686a3ed12f8b75c791b22f6bdaae0c3bbb57bf4e9b0fec89828b7305a72d2c4b0c5f31398cd98ba84a3cfb033e184103af4402bfd1aef34059773150bc165cfd43b02b1b3d56a91154124210bfaaf02c9f4fd66af6b764db8724a4593c063d3b81955ddfc186cf7f4ba755a477d1f92d1df3878f84dea8279499cc16b4112e265ac0396ea2ff89dc85d9c93ed6c3110e0678bd2ff5957e0e739c4595390872ac7e5aa226af1477ccabd615a8c16481cc2ddcd24727fe1eb3f90aa7583218c7f453720ac7013581707ccdc94275866450600667bbda80368e243f6320782494b33fc7c6053c0bf0aee7e4ace81180f6ec0366f6707b71388cfd08d6d87b0a3dbc6194d81c4a1c83f289a39e6feb0ae7f3f17e41aa45bade86bb3c10a03e1d12b95f771ff98a68344cd686b0f1ff581cc4bf5af560df58b12c8296b2395b0e8e3fb2a2c3a458d379635fd603144f7fbae90993ba5b97460a2f443fe1c6e60e07dabdf1c0d6ab24b2d0e6ec879dccd52a30dd4006a1222f0e783272e1259f1fcc216fb4f1b097d5a70007973d61732050cc362e6559f5bed8e6f668ee5c3505588aff2a1983bb20f7b597d6158758752a3384d1adbc8078f36ec565d7b6882afa584ac95141d78e76c10605ed85f85138c173dce8035258313335e2881d682f610466ed1bf43273c3e185df1396f86410c81d8b4015f258232ea288a8a0bc0126450a3ffd16fbedb02f4f78b50f7a79e12dc6805f15b264f492c419a7e0ba03b56d6c2546c737549108bce1baa8f6803ff3ab0e45d8ab74cfe4f312c94a1e21af6040c134d784c123f624051b1db03c554e1f40ba1d6fa183c5082083636207fc281760f371605c898695b4a2a3efc58337b1e052e5141d8fc18a05c1e0101263c22e1df1f309fdd201b56865e1239da1c1d058d9479b0452851f1055ec9020020923782509077aa4546e970b8e384d177e4645437bd801e6c6cf780b401301329180d9f3c7ac4a01bb79c27d020861dddcb4bd502fbdc84f6ac77fdf03011c0edef67b871bf3097c63d68f679fbe4500810eada72cae70c46d4aa1bf103e0b0fdebd4674be47fd9770d500b9e911727f8bdc76f5dd7d3bf75702a0bdfbf121debd5daf38aa742f130c884f53e4d1ca69250490614ce2b37f81f1506130cd1a0ddba13b3f9ff46933a866ca1f6cebaea956a1b312e401079e68c04395b08a0ea75eab3fd5ff142b55ed414de1ef9990714a02369a479bfb9309b0007c72b412c6bee100ef289fdec1e4b3b6270da4f585e640f5ed1fbadb51be3c4e215aa111c4d01566be7294515641075251e2b672226df3f9f1dcddef3487c019c168e20aefc2b69536c4f00dcc77baf4d0bf1444ec27389914f355bb3bc0b8482bee0000bfa15084c6f12f87194d1c59bbdd828ecc4d77c0b013b1593e313c87bbb73c0558f443bdf5efa1cc8615d76de935495875dc128a3a1272a40e2386d8c6ff2a1599adb300ba9e4c2df33877a8ef476b2a6dd5a7add35e62e96234755093a42a1c69458a975d36348e64f8177ae1ac198cae9786bf2be73835c4980b20a0bed013b66d852ddec68781722111082edfa53b5396b7cd55f3cffa07ca66de7127d71b3c428b5598d0d62947f87af70939359a9c904b226f4eeef609b611ed9b2e1e22ac659dbf8ca38299349b987c5c930c74f7f641af980c4744f3334af8dcf911184afff3c188f8786f5a207fb27225cc2ea9df4417895f77330b8701292932bc084cec49ee7d0188d5d8a69f3302a6c40f25894ab72b16b6ce738359fa813dc514c984c44dd6fc814fdb8a92f7832d60230d8f7f1188d800e1ce8a76267ddd4218bae6e01d3a67c1e7fce88e142f03745161a6b412e8bb1861ca0327eb112b1c141ccaaecd3bb6634f808e8cad6d81199ad4ab4d995ecf0afeb2046e54e8a078218b928e3d820f85fd11d09071ccbb018050f98d2872c3c2dadc3a60cc729fef2d646bf4bf2259517d7446cf436052c8e62bb506144f569fc41e8091a7457afb0f9dffea24b3b27c67f2fd76e459a7766238a91337b08ced9db35d7c9ebca14a086905806bc27e1f3e066e12f6b8122ec83b533572616e266069852623b56d021de5cb06ca919441df9ba169c8319da760f471517b54ffe0ba6d8d269c73edef2e902ab0e560ab4b882d5183522cad336a26a7c76d2d639807f58b85eddd78e81b8a3342f44c4dacf3ac76bcfd43b0ccad7ff1ee4093247132951c8b4526b01a11344acc5788941e56ba6f4306ca783e647c6c5774a81a4775192a3e555093960ad3bcb3cabf2b6b0afb70f0edb9d2204e6a7cfc3f4d8413d8cfe6fab61d61430bde193b220d9a7d37427eb3dec724e79b3faa38e901efe3253b5bad7fa874462c4a350d3d4e802e74a1207d390dd70bef49070f5ea63fd6cb680b77476014ff0ffbad16fac086798e622e1083cbeef09e2e1b1ee93f9ed14f98f712b97c86702de24dcc0038d041a853fa53a70685a2efc90f3eb56f5f6bd5d5ccd2c01d98ae3028a8aea65076d7b27a844517fb15ee73242514b8477cfe55112270ada6088b1446362b14a4df3736840405af3834cbc0f345aa7ae14cf47c69b8eabaab9f1c0088a5312e2256ceb4ba9dabf6a739c0b323d5c744b678a4e499fe868d71741826c2d6572d75ac83be887d0dae93c8347a8804a0ec851119e37ecf64b380e2bd182b17e86688a7fd24f8ae475e6d4f248b248de5c6aa990c5951c51a31ad7c002e6e9c2858c0eeb5adfc53fbf00a5044aed2285b21ad67236aaab1b274a840ff07fe2ddc001482d66502aa680bd62cb44d0928fdbbad29a426f39795234357160a6e3193d6323a73e4edb757871caa36f4de39a736829eebf9f1510dfa27cd851e1c61d4fe6fc889dd9dde2f86e2521da36fcf1771e53dc5fdfdd6014efe8a5e2679401b6f4d1fe3160bb5cc90087aec4dc6b453a147eb1de107f06908d162492f3d6a7438dcac5253dc99ed2d84aecfd81305facbd30333be09ea2cf660b0b317facc87c6433d451388db7a0faa93fef488d632f91480224321cd019f3883861aefd0ca40ef55cadb666d1899f6a6f2647e66eb0132f4f75b98849a6a90ce61203bfa2af612da2c3da7fc1e26967b70b3a5c1b71a20206fc32ba53ec6085bb926d366a0c73d9c611add30654769f312e4fc2377285f5e46994ea4723e116a592a4e1363ec6ffa683fbaa9c0474f229b551b9bbc11985bf91b37552219266acc010c0f999d69d689a8c72de336dd24b8f03021961aa4797a70c085826ffe9db212692364b62c9004a2db2da20f193d39bdc9e498fac5704ca925b6ce8f3d7567106079f67e2de104ec08944b5ff84d5306e075b1e68bb9fd6ed1b28812cfb75906df61bb6627f1dcd5d2f89b6460733a33d5e728a77da3996463c54693264d882305209e4042e98f85586144f3cea2e25fd70c98e3b59462e80de1a81975cfbf21e29ef92b97e0d91eaba9c67da8c8a6e9740b2f63add2914d15ecc144ed27a2059a5d9c7725faadd34ac4ee16d7ccf890a3ea236e1e130d11afac46cd797ba624ab0be9ac9cfd58e084cea61eefc084deb76360635deb4be256c28353bee76402c2cc908f621341aca643965e232dd30bf4c687e243a482c7d5cab5c38eb56f03e52cd429b4edf21968a9c93d9aa1cb4eb218101db540d779cca669697dd8521335263ba47751dd80436173c1294642db2bb2d6bcb41324ac15fab206123d08146e4c0b93b94918fbf5bd400990de0b85f41402d9a058e31afdb451873a31062879706037c28533ef35980b80aef494b7933625e51712d78ea0e2926b7fc8ca07b86be729f7ea19b95ba824685acf484c597073ee15f172ca161b3f45188ccb193050bee9bad14cfc6ecebc47d320fef3a2716b556320a36ee7ff1e7b924da100000000000000000000000000000000000000000000000000000000000000020df85a574796c89381ba727799c5ae697c71978e6aad51a447cdd95e7b0dfbde000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000";

    /// @notice Expected averaged output of `getMockVectors()`, computed via off-chain script
    /// @dev Not actually declared as a constant because of value type
    uint256[] internal AVERAGED_VECTOR = [
        201_226_443_052_291_870,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        213_924_318_552_017_200,
        246_073_365_211_486_820,
        221_474_930_644_035_340,
        244_280_248_880_386_350,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        68_120_352_923_870_090,
        616_199_254_989_624_000,
        9_048_122_912_645_340,
        138_878_688_216_209_400,
        194_584_712_386_131_300,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        339_984_089_136_123_660,
        218_376_532_196_998_600,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        413_409_233_093_261_700,
        115_792_089_237_316_200,
        199_697_002_768_516_540,
        891_243_100_166_320_800,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        101_351_298_391_819_000,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        34_314_319_491_386_414,
        115_792_089_237_316_200,
        365_631_014_108_657_840,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        209_139_227_867_126_460,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        141_819_819_808_006_300,
        304_662_257_432_937_600,
        100_395_515_561_103_820,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        135_752_618_312_835_700,
        402_446_895_837_783_800,
        115_792_089_237_316_200,
        178_313_910_961_151_120,
        115_792_089_237_316_200,
        115_792_089_237_316_200,
        136_949_479_579_925_540,
        156_344_577_670_097_350,
        115_792_089_237_316_200,
        82_512_013_614_177_700,
        115_792_089_237_316_200
    ];

    /*//////////////////////////////////////////////////////////////
                               FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /// @notice Get LLM rationales
    function getMockRationales() internal pure returns (string[] memory) {
        string[] memory rationales = new string[](3);
        rationales[0] = unicode"😌Sure thing, let's do this. 🔑";
        rationales[1] = unicode"😌Sure thing, let's do this. 🔑";
        rationales[2] = unicode"😌Sure thing, let's do this. 🔑";

        return rationales;
    }

    /// @notice Get encoded LLM output vector embeddings
    function getMockVectors() internal pure returns (bytes[] memory) {
        bytes[] memory vectors = new bytes[](3);
        vectors[0] =
            hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000002cae662418c171efffffffffffffffffffffffffffffffffffffffffffffffffddfbb9461b1847cfffffffffffffffffffffffffffffffffffffffffffffffffb2bc36b31ecf618ffffffffffffffffffffffffffffffffffffffffffffffffff0fd1c51ab2153c00000000000000000000000000000000000000000000000002f80308c81c4930000000000000000000000000000000000000000000000000036a3a6c021d9a640000000000000000000000000000000000000000000000000312d646a7b1270c0000000000000000000000000000000000000000000000000363db979428d12efffffffffffffffffffffffffffffffffffffffffffffffffb02bf845a3143e0fffffffffffffffffffffffffffffffffffffffffffffffffd5b12d80ae7570afffffffffffffffffffffffffffffffffffffffffffffffffd2732fe5d020690fffffffffffffffffffffffffffffffffffffffffffffffffb500c6de43727fcfffffffffffffffffffffffffffffffffffffffffffffffff644f6743e7c4c08fffffffffffffffffffffffffffffffffffffffffffffffffde2063a54f26dc6ffffffffffffffffffffffffffffffffffffffffffffffffd920ff658dfa0f28fffffffffffffffffffffffffffffffffffffffffffffffffb64f38943ce834c00000000000000000000000000000000000000000000000000f203199e00638a000000000000000000000000000000000000000000000000088d2df5288452c0000000000000000000000000000000000000000000000000002025384817a0dc00000000000000000000000000000000000000000000000001ed656e5dffd7f800000000000000000000000000000000000000000000000002b34dc3d47f3564fffffffffffffffffffffffffffffffffffffffffffffffffadb043ca8c7b730fffffffffffffffffffffffffffffffffffffffffffffffff889540b6942a8d4ffffffffffffffffffffffffffffffffffffffffffffffffff2cb5d5aa4229c900000000000000000000000000000000000000000000000004b7ddba4e3e4f0c0000000000000000000000000000000000000000000000000307d44c8ce23dc8fffffffffffffffffffffffffffffffffffffffffffffffffd00debf424a5190ffffffffffffffffffffffffffffffffffffffffffffffffd2d9737a1f9a3590fffffffffffffffffffffffffffffffffffffffffffffffffc67d49d1c32b508fffffffffffffffffffffffffffffffffffffffffffffffffc1bcec73427f6a0ffffffffffffffffffffffffffffffffffffffffffffffffffe18a64ee210ccbfffffffffffffffffffffffffffffffffffffffffffffffffc4fe1f0358c814400000000000000000000000000000000000000000000000005bcb981d563f984ffffffffffffffffffffffffffffffffffffffffffffffffff1336d363dbe15400000000000000000000000000000000000000000000000002c5775db0ba45bc0000000000000000000000000000000000000000000000000c5e54e0a9ee72a0fffffffffffffffffffffffffffffffffffffffffffffffff9c923ffe1a7f644fffffffffffffffffffffffffffffffffffffffffffffffff9ed1a56f395f402000000000000000000000000000000000000000000000000016812780a2b42f8fffffffffffffffffffffffffffffffffffffffffffffffff9b8a2ba67bf0678fffffffffffffffffffffffffffffffffffffffffffffffffb9b55b8da152280ffffffffffffffffffffffffffffffffffffffffffffffffe9d30d5d3286a0700000000000000000000000000000000000000000000000000079e8b117fe4c2efffffffffffffffffffffffffffffffffffffffffffffffff9666aad7d1b0dec0000000000000000000000000000000000000000000000000512fb785acff8b0fffffffffffffffffffffffffffffffffffffffffffffffff978986cffeecdb8fffffffffffffffffffffffffffffffffffffffffffffffff9c966a69f1fcaba00000000000000000000000000000000000000000000000002e70305099e9abcffffffffffffffffffffffffffffffffffffffffffffffffffee698062619d9bffffffffffffffffffffffffffffffffffffffffffffffffff4362708a2c9ec2fffffffffffffffffffffffffffffffffffffffffffffffffc2c83325f6c05b000000000000000000000000000000000000000000000000001f7d85fedc4209c000000000000000000000000000000000000000000000000043a60b57ec244800000000000000000000000000000000000000000000000000164ad30820fd1ccfffffffffffffffffffffffffffffffffffffffffffffffffac9317413818a7cfffffffffffffffffffffffffffffffffffffffffffffffffa95e97904fb3e4cfffffffffffffffffffffffffffffffffffffffffffffffff6a3fe53141eef4cffffffffffffffffffffffffffffffffffffffffffffffffe247462dbdfe2ce800000000000000000000000000000000000000000000000001e24a497fdda2740000000000000000000000000000000000000000000000000595c751cb5ea6f8fffffffffffffffffffffffffffffffffffffffffffffffff5dc6bca72ae3b3c00000000000000000000000000000000000000000000000002797f8ea9599c90fffffffffffffffffffffffffffffffffffffffffffffffffbe4037fac10d4f2fffffffffffffffffffffffffffffffffffffffffffffffff75dd617757b7cc800000000000000000000000000000000000000000000000001e68ad37a893c24000000000000000000000000000000000000000000000000022b7290a695a9c6fffffffffffffffffffffffffffffffffffffffffffffffff586a98da7a47b300000000000000000000000000000000000000000000000000125243d3d2cdda4fffffffffffffffffffffffffffffffffffffffffffffffffc333481db3d8e3c";
        vectors[1] =
            hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000002cae662418c171efffffffffffffffffffffffffffffffffffffffffffffffffddfbb9461b1847cfffffffffffffffffffffffffffffffffffffffffffffffffb2bc36b31ecf618ffffffffffffffffffffffffffffffffffffffffffffffffff0fd1c51ab2153c00000000000000000000000000000000000000000000000002f80308c81c4930000000000000000000000000000000000000000000000000036a3a6c021d9a640000000000000000000000000000000000000000000000000312d646a7b1270c0000000000000000000000000000000000000000000000000363db979428d12efffffffffffffffffffffffffffffffffffffffffffffffffb02bf845a3143e0fffffffffffffffffffffffffffffffffffffffffffffffffd5b12d80ae7570afffffffffffffffffffffffffffffffffffffffffffffffffd2732fe5d020690fffffffffffffffffffffffffffffffffffffffffffffffffb500c6de43727fcfffffffffffffffffffffffffffffffffffffffffffffffff644f6743e7c4c08fffffffffffffffffffffffffffffffffffffffffffffffffde2063a54f26dc6ffffffffffffffffffffffffffffffffffffffffffffffffd920ff658dfa0f28fffffffffffffffffffffffffffffffffffffffffffffffffb64f38943ce834c00000000000000000000000000000000000000000000000000f203199e00638a000000000000000000000000000000000000000000000000088d2df5288452c0000000000000000000000000000000000000000000000000002025384817a0dc00000000000000000000000000000000000000000000000001ed656e5dffd7f800000000000000000000000000000000000000000000000002b34dc3d47f3564fffffffffffffffffffffffffffffffffffffffffffffffffadb043ca8c7b730fffffffffffffffffffffffffffffffffffffffffffffffff889540b6942a8d4ffffffffffffffffffffffffffffffffffffffffffffffffff2cb5d5aa4229c900000000000000000000000000000000000000000000000004b7ddba4e3e4f0c0000000000000000000000000000000000000000000000000307d44c8ce23dc8fffffffffffffffffffffffffffffffffffffffffffffffffd00debf424a5190ffffffffffffffffffffffffffffffffffffffffffffffffd2d9737a1f9a3590fffffffffffffffffffffffffffffffffffffffffffffffffc67d49d1c32b508fffffffffffffffffffffffffffffffffffffffffffffffffc1bcec73427f6a0ffffffffffffffffffffffffffffffffffffffffffffffffffe18a64ee210ccbfffffffffffffffffffffffffffffffffffffffffffffffffc4fe1f0358c814400000000000000000000000000000000000000000000000005bcb981d563f984ffffffffffffffffffffffffffffffffffffffffffffffffff1336d363dbe15400000000000000000000000000000000000000000000000002c5775db0ba45bc0000000000000000000000000000000000000000000000000c5e54e0a9ee72a0fffffffffffffffffffffffffffffffffffffffffffffffff9c923ffe1a7f644fffffffffffffffffffffffffffffffffffffffffffffffff9ed1a56f395f402000000000000000000000000000000000000000000000000016812780a2b42f8fffffffffffffffffffffffffffffffffffffffffffffffff9b8a2ba67bf0678fffffffffffffffffffffffffffffffffffffffffffffffffb9b55b8da152280ffffffffffffffffffffffffffffffffffffffffffffffffe9d30d5d3286a0700000000000000000000000000000000000000000000000000079e8b117fe4c2efffffffffffffffffffffffffffffffffffffffffffffffff9666aad7d1b0dec0000000000000000000000000000000000000000000000000512fb785acff8b0fffffffffffffffffffffffffffffffffffffffffffffffff978986cffeecdb8fffffffffffffffffffffffffffffffffffffffffffffffff9c966a69f1fcaba00000000000000000000000000000000000000000000000002e70305099e9abcffffffffffffffffffffffffffffffffffffffffffffffffffee698062619d9bffffffffffffffffffffffffffffffffffffffffffffffffff4362708a2c9ec2fffffffffffffffffffffffffffffffffffffffffffffffffc2c83325f6c05b000000000000000000000000000000000000000000000000001f7d85fedc4209c000000000000000000000000000000000000000000000000043a60b57ec244800000000000000000000000000000000000000000000000000164ad30820fd1ccfffffffffffffffffffffffffffffffffffffffffffffffffac9317413818a7cfffffffffffffffffffffffffffffffffffffffffffffffffa95e97904fb3e4cfffffffffffffffffffffffffffffffffffffffffffffffff6a3fe53141eef4cffffffffffffffffffffffffffffffffffffffffffffffffe247462dbdfe2ce800000000000000000000000000000000000000000000000001e24a497fdda2740000000000000000000000000000000000000000000000000595c751cb5ea6f8fffffffffffffffffffffffffffffffffffffffffffffffff5dc6bca72ae3b3c00000000000000000000000000000000000000000000000002797f8ea9599c90fffffffffffffffffffffffffffffffffffffffffffffffffbe4037fac10d4f2fffffffffffffffffffffffffffffffffffffffffffffffff75dd617757b7cc800000000000000000000000000000000000000000000000001e68ad37a893c24000000000000000000000000000000000000000000000000022b7290a695a9c6fffffffffffffffffffffffffffffffffffffffffffffffff586a98da7a47b300000000000000000000000000000000000000000000000000125243d3d2cdda4fffffffffffffffffffffffffffffffffffffffffffffffffc333481db3d8e3c";
        vectors[2] =
            hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000002cae662418c171efffffffffffffffffffffffffffffffffffffffffffffffffddfbb9461b1847cfffffffffffffffffffffffffffffffffffffffffffffffffb2bc36b31ecf618ffffffffffffffffffffffffffffffffffffffffffffffffff0fd1c51ab2153c00000000000000000000000000000000000000000000000002f80308c81c4930000000000000000000000000000000000000000000000000036a3a6c021d9a640000000000000000000000000000000000000000000000000312d646a7b1270c0000000000000000000000000000000000000000000000000363db979428d12efffffffffffffffffffffffffffffffffffffffffffffffffb02bf845a3143e0fffffffffffffffffffffffffffffffffffffffffffffffffd5b12d80ae7570afffffffffffffffffffffffffffffffffffffffffffffffffd2732fe5d020690fffffffffffffffffffffffffffffffffffffffffffffffffb500c6de43727fcfffffffffffffffffffffffffffffffffffffffffffffffff644f6743e7c4c08fffffffffffffffffffffffffffffffffffffffffffffffffde2063a54f26dc6ffffffffffffffffffffffffffffffffffffffffffffffffd920ff658dfa0f28fffffffffffffffffffffffffffffffffffffffffffffffffb64f38943ce834c00000000000000000000000000000000000000000000000000f203199e00638a000000000000000000000000000000000000000000000000088d2df5288452c0000000000000000000000000000000000000000000000000002025384817a0dc00000000000000000000000000000000000000000000000001ed656e5dffd7f800000000000000000000000000000000000000000000000002b34dc3d47f3564fffffffffffffffffffffffffffffffffffffffffffffffffadb043ca8c7b730fffffffffffffffffffffffffffffffffffffffffffffffff889540b6942a8d4ffffffffffffffffffffffffffffffffffffffffffffffffff2cb5d5aa4229c900000000000000000000000000000000000000000000000004b7ddba4e3e4f0c0000000000000000000000000000000000000000000000000307d44c8ce23dc8fffffffffffffffffffffffffffffffffffffffffffffffffd00debf424a5190ffffffffffffffffffffffffffffffffffffffffffffffffd2d9737a1f9a3590fffffffffffffffffffffffffffffffffffffffffffffffffc67d49d1c32b508fffffffffffffffffffffffffffffffffffffffffffffffffc1bcec73427f6a0ffffffffffffffffffffffffffffffffffffffffffffffffffe18a64ee210ccbfffffffffffffffffffffffffffffffffffffffffffffffffc4fe1f0358c814400000000000000000000000000000000000000000000000005bcb981d563f984ffffffffffffffffffffffffffffffffffffffffffffffffff1336d363dbe15400000000000000000000000000000000000000000000000002c5775db0ba45bc0000000000000000000000000000000000000000000000000c5e54e0a9ee72a0fffffffffffffffffffffffffffffffffffffffffffffffff9c923ffe1a7f644fffffffffffffffffffffffffffffffffffffffffffffffff9ed1a56f395f402000000000000000000000000000000000000000000000000016812780a2b42f8fffffffffffffffffffffffffffffffffffffffffffffffff9b8a2ba67bf0678fffffffffffffffffffffffffffffffffffffffffffffffffb9b55b8da152280ffffffffffffffffffffffffffffffffffffffffffffffffe9d30d5d3286a0700000000000000000000000000000000000000000000000000079e8b117fe4c2efffffffffffffffffffffffffffffffffffffffffffffffff9666aad7d1b0dec0000000000000000000000000000000000000000000000000512fb785acff8b0fffffffffffffffffffffffffffffffffffffffffffffffff978986cffeecdb8fffffffffffffffffffffffffffffffffffffffffffffffff9c966a69f1fcaba00000000000000000000000000000000000000000000000002e70305099e9abcffffffffffffffffffffffffffffffffffffffffffffffffffee698062619d9bffffffffffffffffffffffffffffffffffffffffffffffffff4362708a2c9ec2fffffffffffffffffffffffffffffffffffffffffffffffffc2c83325f6c05b000000000000000000000000000000000000000000000000001f7d85fedc4209c000000000000000000000000000000000000000000000000043a60b57ec244800000000000000000000000000000000000000000000000000164ad30820fd1ccfffffffffffffffffffffffffffffffffffffffffffffffffac9317413818a7cfffffffffffffffffffffffffffffffffffffffffffffffffa95e97904fb3e4cfffffffffffffffffffffffffffffffffffffffffffffffff6a3fe53141eef4cffffffffffffffffffffffffffffffffffffffffffffffffe247462dbdfe2ce800000000000000000000000000000000000000000000000001e24a497fdda2740000000000000000000000000000000000000000000000000595c751cb5ea6f8fffffffffffffffffffffffffffffffffffffffffffffffff5dc6bca72ae3b3c00000000000000000000000000000000000000000000000002797f8ea9599c90fffffffffffffffffffffffffffffffffffffffffffffffffbe4037fac10d4f2fffffffffffffffffffffffffffffffffffffffffffffffff75dd617757b7cc800000000000000000000000000000000000000000000000001e68ad37a893c24000000000000000000000000000000000000000000000000022b7290a695a9c6fffffffffffffffffffffffffffffffffffffffffffffffff586a98da7a47b300000000000000000000000000000000000000000000000000125243d3d2cdda4fffffffffffffffffffffffffffffffffffffffffffffffffc333481db3d8e3c";

        return vectors;
    }
}

/// @title FrenrugTest
/// @notice Base setup to inherit for Frenrug subtests
contract FrenrugTest is Test, IFrenrugEvents, FrenrugParams {
    /*//////////////////////////////////////////////////////////////
                                INTERNAL
    //////////////////////////////////////////////////////////////*/

    /// @notice Coordinator
    EIP712Coordinator internal COORDINATOR;

    /// @notice Mock node (Alice)
    MockNode internal ALICE;

    /// @notice Mock node (Bob)
    MockNode internal BOB;

    /// @notice Mock node (Charlie)
    MockNode internal CHARLIE;

    /// @notice Aggregate nodes
    MockNode[] internal NODES;

    /// @notice Aggregate node addresses
    address[] internal NODE_ADDRESSES;

    /// @notice FriendtechSharesV1 contract
    FriendtechSharesV1 internal FRIENDTECH;

    /// @notice EZKL DataAttestation contract
    DataAttestation internal ATTESTOR;

    /// @notice EZKL Verifier contract address
    address internal VERIFIER_ADDRESS;

    /// @notice Delegatee address
    address internal DELEGATEE_ADDRESS;

    /// @notice Delegatee private key
    uint256 internal DELEGATEE_PRIVATE_KEY;

    /// @notice Frenrug
    Frenrug internal FRENRUG;

    /// @notice Mock Friendtech key
    MockKey internal KEY;

    /*//////////////////////////////////////////////////////////////
                                 SETUP
    //////////////////////////////////////////////////////////////*/

    function setUp() public {
        // Initialize coordinator
        COORDINATOR = new EIP712Coordinator();

        // Initialize mock nodes
        ALICE = new MockNode(COORDINATOR);
        BOB = new MockNode(COORDINATOR);
        CHARLIE = new MockNode(COORDINATOR);

        // Initialize node allowlist
        address[] memory nodeAllowlist = new address[](3);
        bool[] memory nodeStatus = new bool[](3);

        // For each node
        NODES = [ALICE, BOB, CHARLIE];
        NODE_ADDRESSES = [address(ALICE), address(BOB), address(CHARLIE)];
        for (uint256 i = 0; i < 3; i++) {
            // Select node
            MockNode node = NODES[i];

            // Activate nodes
            vm.warp(0);
            node.registerNode(address(node));
            vm.warp(COORDINATOR.cooldown());
            node.activateNode();

            // Add node to allowlist
            nodeAllowlist[i] = address(node);
            nodeStatus[i] = true;
        }

        // Create new FriendtechSharesV1
        FRIENDTECH = new FriendtechSharesV1();

        // Initialize Frenrug
        // Setup DA parameters

        // Contract address static-call'd by DA contract (in this case, address(FRENRUG))
        address predictedFrenrugAddress = 0x87B2d08110B7D50861141D7bBDd49326af3Ecb31;
        address[] memory _contractAddresses = new address[](2);
        _contractAddresses[0] = predictedFrenrugAddress;
        _contractAddresses[1] = predictedFrenrugAddress;

        // Function calldata to get int256 DA input parameters
        bytes[][] memory _calldata = new bytes[][](2);
        _calldata[0] = new bytes[](1);
        _calldata[1] = new bytes[](1);
        bytes4 GETTER_SELECTOR = bytes4(keccak256("attestedInputs(uint256)"));
        _calldata[0][0] = abi.encodeWithSelector(GETTER_SELECTOR, 0);
        _calldata[1][0] = abi.encodeWithSelector(GETTER_SELECTOR, 1);

        // Decimals and scaling set to default 0
        uint256[][] memory _decimals = new uint256[][](2);
        _decimals[0] = new uint256[](1);
        _decimals[1] = new uint256[](1);
        _decimals[0][0] = 0;
        _decimals[1][0] = 0;
        uint256[] memory _scales = new uint256[](2);
        _scales[0] = 0;
        _scales[1] = 0;

        // Initialize DataAttestation
        ATTESTOR = new DataAttestation(
            _contractAddresses,
            _calldata,
            _decimals,
            _scales,
            0,
            address(this)
        );

        // Deploy verifier contract
        VERIFIER_ADDRESS = deployCode("Verifier.sol:Halo2Verifier");

        // Setup Frenrug configuration
        Configured.Config memory config = Configured.Config({
            attestor: address(ATTESTOR),
            nodes: uint16(NODES.length),
            maxCallbackGasLimit: 10_000_000 wei,
            verifier: VERIFIER_ADDRESS,
            containerId: "inference,proving"
        });

        // Initialize Frenrug
        FRENRUG = new Frenrug(
            config,
            address(FRIENDTECH),
            address(COORDINATOR),
            nodeAllowlist,
            nodeStatus
        );

        // Create new delegatee
        DELEGATEE_PRIVATE_KEY = 0xA11CE;
        DELEGATEE_ADDRESS = vm.addr(DELEGATEE_PRIVATE_KEY);

        // Update Frenrug delegatee
        FRENRUG.updateDelegatee(DELEGATEE_ADDRESS);

        // Setup mock key
        KEY = new MockKey(FRIENDTECH);

        // Fund mock key with 1 ETH
        payable(KEY).transfer(1 ether);
    }

    /*//////////////////////////////////////////////////////////////
                           UTILITY FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /// @notice Creates new mock subscription with sane defaults
    function getMockSubscription() public view returns (Coordinator.Subscription memory) {
        return Coordinator.Subscription({
            activeAt: uint32(block.timestamp),
            owner: address(FRENRUG),
            maxGasPrice: 1 gwei,
            redundancy: 1,
            maxGasLimit: 5_000_000 wei + uint32(COORDINATOR.DELEGATEE_OVERHEAD_CREATE_WEI())
                + uint32(COORDINATOR.DELIVERY_OVERHEAD_WEI()),
            frequency: 1,
            period: 0,
            containerId: "llm-inference",
            inputs: ""
        });
    }

    /// @notice Generates the hash of the fully encoded EIP-712 message, based on environment domain config
    /// @param nonce subscriber contract nonce
    /// @param expiry signature expiry
    /// @param sub subscription
    /// @return typed EIP-712 message hash
    function getMessage(uint32 nonce, uint32 expiry, Coordinator.Subscription memory sub)
        public
        view
        returns (bytes32)
    {
        return LibSign.getTypedMessageHash(
            COORDINATOR.EIP712_NAME(), COORDINATOR.EIP712_VERSION(), address(COORDINATOR), nonce, expiry, sub
        );
    }

    /// @notice Generates mock LLM response
    /// @dev Overriding style preferences (explicitly-named returns) for ease of reading
    /// @param i frenrug params index
    /// @return nonce delegatee nonce
    /// @return expiry signed delegate tx expiry
    /// @return subscription created delegated subscription
    /// @return v signature param
    /// @return r signature param
    /// @return s signature param
    /// @return interval delivery interval
    /// @return input subscription input
    /// @return output subscription output
    /// @return proof optional subscription proof
    function getMockLLMResponse(uint256 i)
        public
        view
        returns (
            uint32 nonce,
            uint32 expiry,
            Coordinator.Subscription memory subscription,
            uint8 v,
            bytes32 r,
            bytes32 s,
            uint32 interval,
            bytes memory input,
            bytes memory output,
            bytes memory proof
        )
    {
        // Collect nonce based on subscriber nonce
        nonce = COORDINATOR.maxSubscriberNonce(address(FRENRUG)) + 1;

        // Setup expiry 1 hour in future
        expiry = uint32(block.timestamp) + 1 hours;

        // Generate new subscription
        subscription = getMockSubscription();

        // Override subscription defaults to conform to LLM response (3 responding nodes)
        subscription.redundancy = 3;

        // Generate message & sign
        bytes32 message = getMessage(nonce, expiry, subscription);
        (v, r, s) = vm.sign(DELEGATEE_PRIVATE_KEY, message);

        // Set default interval (callback, interval==1)
        interval = 1;

        // Setup input (hashed vector, messageId, subject)
        bytes[] memory vectors = getMockVectors();
        bytes32 hashedVector = keccak256(vectors[i]);
        uint48 messageId = 1;
        address subject = address(KEY);
        input = abi.encode(hashedVector, messageId, subject);

        // Setup output (rationale, vector)
        string[] memory rationales = getMockRationales();
        output = abi.encode(rationales[i], vectors[i]);

        // Setup proof (LLM response has no succinct proof)
        proof = "";
    }

    /// @notice Delivers mock LLM responses for each node
    function deliverLLMResponses() public {
        // Cache nonce locally
        uint32 nonce = COORDINATOR.maxSubscriberNonce(address(FRENRUG)) + 1;

        // For each node
        for (uint256 i = 0; i < NODES.length; i++) {
            // Generate mock LLM response
            (
                , // Skip nonce (delivering same subscription)
                uint32 expiry,
                Coordinator.Subscription memory subscription,
                uint8 v,
                bytes32 r,
                bytes32 s,
                uint32 interval,
                bytes memory llmInput,
                bytes memory llmOutput,
                bytes memory llmProof
            ) = getMockLLMResponse(i);

            // Deliver signed response
            NODES[i].deliverComputeDelegatee(
                nonce, expiry, subscription, v, r, s, interval, llmInput, llmOutput, llmProof
            );
        }
    }

    /// @notice Delivers setup summarizer response
    /// @param subscriptionId summarizer subscription ID to deliver
    /// @param action executed action
    /// @param status execution failure status
    function deliverSummarizerResponse(
        uint32 subscriptionId,
        Frenrug.MessageAction action,
        FriendtechManager.ExecutionFailure status
    ) public {
        // Setup inputs
        uint256 poseidon_hash;
        bytes memory rawInputVector = "mock-raw-input-vector";
        bytes memory input;
        bytes memory output = abi.encode(uint8(action));
        bytes memory proof;

        // Setup input + proof based on action type
        if (action == Frenrug.MessageAction.Noop) {
            // Noop
            poseidon_hash = HASH_NOOP;
            input = abi.encode(rawInputVector, poseidon_hash);
            proof = PROOF_NOOP;
        } else if (action == Frenrug.MessageAction.Buy) {
            // Buy
            poseidon_hash = HASH_BUY;
            input = abi.encode(rawInputVector, poseidon_hash);
            proof = PROOF_BUY;
        } else if (action == Frenrug.MessageAction.Sell) {
            // Sell
            poseidon_hash = HASH_SELL;
            input = abi.encode(rawInputVector, poseidon_hash);
            proof = PROOF_SELL;
        }

        // Expect successful data emit
        vm.expectEmit(address(FRENRUG));
        emit MessageResponse(
            1, address(KEY), action, status, getMockRationales(), NODE_ADDRESSES, rawInputVector, poseidon_hash
        );

        // Deliver summarizer response
        ALICE.deliverCompute(subscriptionId, 1, input, output, proof);
    }
}

/// @title FrenrugE2ETest
/// @notice Tests E2E Frenrug functionality (combined testing rather than isolated)
contract FrenrugE2ETest is FrenrugTest {
    /// @notice Can successfully execute flow culiminating in a Noop
    function testSuccessfulNoopFlow() public {
        // Deliver LLM responses
        deliverLLMResponses();

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 0);
        assertEq(initialKeys, 0);

        // Deliver summarizer response
        deliverSummarizerResponse(2, Frenrug.MessageAction.Noop, FriendtechManager.ExecutionFailure.None);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, finalBalance);
        assertEq(initialKeys, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in InsufficientFunds
    function testInsufficientFundsFlow() public {
        // Ensure mock key has registered w/ Frenrug and purchased first key
        KEY.buyKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 0);
        assertEq(initialKeys, 0);

        // Deliver summarizer response
        deliverSummarizerResponse(2, Frenrug.MessageAction.Buy, FriendtechManager.ExecutionFailure.InsufficientFunds);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, finalBalance);
        assertEq(initialKeys, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in KeyNotActive
    function testKeyNotActiveFlow() public {
        // Deliver LLM responses
        deliverLLMResponses();

        // Transfer 10 ether to Frenrug contract
        payable(FRENRUG).transfer(10 ether);

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 10 ether);
        assertEq(initialKeys, 0);

        // Deliver summarizer response
        deliverSummarizerResponse(2, Frenrug.MessageAction.Buy, FriendtechManager.ExecutionFailure.KeyNotActive);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, finalBalance);
        assertEq(initialKeys, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in KeyNotOwned
    function testKeyNotOwnedFlow() public {
        // Ensure mock key has registered w/ Frenrug and purchased at least two key
        KEY.buyKey();
        KEY.buyKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 0 ether);
        assertEq(initialKeys, 0);

        // Deliver summarizer response
        deliverSummarizerResponse(2, Frenrug.MessageAction.Sell, FriendtechManager.ExecutionFailure.KeyNotOwned);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, finalBalance);
        assertEq(initialKeys, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in a key purchase
    function testSuccessfulBuyFlow() public {
        // Ensure mock key has registered w/ Frenrug and purchased first key
        KEY.buyKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Transfer 10 ether to Frenrug contract
        payable(FRENRUG).transfer(10 ether);

        // Calculate cost to purchase key
        uint256 keyCost = FRIENDTECH.getBuyPriceAfterFee(address(KEY), 1);

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 10 ether);
        assertEq(initialKeys, 0);

        // Deliver summarizer response
        deliverSummarizerResponse(2, Frenrug.MessageAction.Buy, FriendtechManager.ExecutionFailure.None);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance - keyCost, finalBalance);
        assertEq(initialKeys + 1, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in a key sale
    function testSuccessfulSellFlow() public {
        // Ensure mock key has registered w/ Frenrug and purchased first key
        KEY.buyKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Transfer 10 ether to Frenrug contract
        payable(FRENRUG).transfer(10 ether);

        // Calculate cost to purchase key
        uint256 keyCost = FRIENDTECH.getBuyPriceAfterFee(address(KEY), 1);

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 10 ether);
        assertEq(initialKeys, 0);

        // Deliver summarizer response to purchase key
        deliverSummarizerResponse(2, Frenrug.MessageAction.Buy, FriendtechManager.ExecutionFailure.None);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance - keyCost, finalBalance);
        assertEq(initialKeys + 1, finalKeys);

        // Deliver LLM responses
        deliverLLMResponses();

        // Calculate expected return from selling key
        uint256 keyRefund = FRIENDTECH.getSellPriceAfterFee(address(KEY), 1);

        // Deliver summarizer response to sell key
        deliverSummarizerResponse(4, Frenrug.MessageAction.Sell, FriendtechManager.ExecutionFailure.None);

        // Assert final key balance and ETH balance
        finalBalance = address(FRENRUG).balance;
        finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance - keyCost + keyRefund, finalBalance);
        assertEq(initialKeys, finalKeys);
    }

    /// @notice Can successfully execute flow culminating in a LastKeyLeft
    function testLastKeyLeftFlow() public {
        // Ensure mock key has registered w/ Frenrug and purchased first key
        KEY.buyKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Transfer 10 ether to Frenrug contract
        payable(FRENRUG).transfer(10 ether);

        // Calculate cost to purchase key
        uint256 keyCost = FRIENDTECH.getBuyPriceAfterFee(address(KEY), 1);

        // Assert initial key balance and ETH balance
        uint256 initialBalance = address(FRENRUG).balance;
        uint256 initialKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance, 10 ether);
        assertEq(initialKeys, 0);

        // Deliver summarizer response to purchase key
        deliverSummarizerResponse(2, Frenrug.MessageAction.Buy, FriendtechManager.ExecutionFailure.None);

        // Assert final key balance and ETH balance
        uint256 finalBalance = address(FRENRUG).balance;
        uint256 finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance - keyCost, finalBalance);
        assertEq(initialKeys + 1, finalKeys);

        // Sell mock key (by owner)
        KEY.sellKey();

        // Deliver LLM responses
        deliverLLMResponses();

        // Deliver summarizer response to sell key
        deliverSummarizerResponse(4, Frenrug.MessageAction.Sell, FriendtechManager.ExecutionFailure.LastKeyLeft);

        // Assert final key balance and ETH balance
        finalBalance = address(FRENRUG).balance;
        finalKeys = FRIENDTECH.sharesBalance(address(KEY), address(FRENRUG));
        assertEq(initialBalance - keyCost, finalBalance);
        assertEq(initialKeys + 1, finalKeys);
    }

    /// @notice On-chain averaging is correctly performed
    function testAveraging() public {
        // Deliver LLM responses
        deliverLLMResponses();

        // Collect averaged inputs
        bytes memory inputs = FRENRUG.getContainerInputs(2, 1, 0, address(0));
        (uint256[] memory decoded) = abi.decode(inputs, (uint256[]));

        // Verify approximate equality with off-chain computed counterparts
        for (uint256 i = 0; i < decoded.length; i++) {
            // Ignore rounding based on required precision
            if (decoded[i] > 10e59) {
                assertApproxEqAbs(decoded[i] / 10e59, AVERAGED_VECTOR[i], 5);
            } else {
                assertApproxEqAbs(decoded[i], AVERAGED_VECTOR[i], 5);
            }
        }
    }
}
